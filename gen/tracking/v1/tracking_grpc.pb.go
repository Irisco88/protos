// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tracking/v1/tracking.proto

package trackingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackingServiceClient is the client API for TrackingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackingServiceClient interface {
	LiveDevices(ctx context.Context, opts ...grpc.CallOption) (TrackingService_LiveDevicesClient, error)
	LastPoints(ctx context.Context, in *LastPointsRequest, opts ...grpc.CallOption) (*LastPointsResponse, error)
	LastPointsData(ctx context.Context, in *LastPointsDataRequest, opts ...grpc.CallOption) (*LastPointsDataResponse, error)
	AllPointsData(ctx context.Context, in *AllPointsDataRequest, opts ...grpc.CallOption) (*AllPointsDataResponse, error)
}

type trackingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackingServiceClient(cc grpc.ClientConnInterface) TrackingServiceClient {
	return &trackingServiceClient{cc}
}

func (c *trackingServiceClient) LiveDevices(ctx context.Context, opts ...grpc.CallOption) (TrackingService_LiveDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TrackingService_ServiceDesc.Streams[0], "/tracking.v1.TrackingService/LiveDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackingServiceLiveDevicesClient{stream}
	return x, nil
}

type TrackingService_LiveDevicesClient interface {
	Send(*LiveDevicesRequest) error
	Recv() (*LiveDevicesResponse, error)
	grpc.ClientStream
}

type trackingServiceLiveDevicesClient struct {
	grpc.ClientStream
}

func (x *trackingServiceLiveDevicesClient) Send(m *LiveDevicesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trackingServiceLiveDevicesClient) Recv() (*LiveDevicesResponse, error) {
	m := new(LiveDevicesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trackingServiceClient) LastPoints(ctx context.Context, in *LastPointsRequest, opts ...grpc.CallOption) (*LastPointsResponse, error) {
	out := new(LastPointsResponse)
	err := c.cc.Invoke(ctx, "/tracking.v1.TrackingService/LastPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingServiceClient) LastPointsData(ctx context.Context, in *LastPointsDataRequest, opts ...grpc.CallOption) (*LastPointsDataResponse, error) {
	out := new(LastPointsDataResponse)
	err := c.cc.Invoke(ctx, "/tracking.v1.TrackingService/LastPointsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackingServiceClient) AllPointsData(ctx context.Context, in *AllPointsDataRequest, opts ...grpc.CallOption) (*AllPointsDataResponse, error) {
	out := new(AllPointsDataResponse)
	err := c.cc.Invoke(ctx, "/tracking.v1.TrackingService/AllPointsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackingServiceServer is the server API for TrackingService service.
// All implementations must embed UnimplementedTrackingServiceServer
// for forward compatibility
type TrackingServiceServer interface {
	LiveDevices(TrackingService_LiveDevicesServer) error
	LastPoints(context.Context, *LastPointsRequest) (*LastPointsResponse, error)
	LastPointsData(context.Context, *LastPointsDataRequest) (*LastPointsDataResponse, error)
	AllPointsData(context.Context, *AllPointsDataRequest) (*AllPointsDataResponse, error)
	mustEmbedUnimplementedTrackingServiceServer()
}

// UnimplementedTrackingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrackingServiceServer struct {
}

func (UnimplementedTrackingServiceServer) LiveDevices(TrackingService_LiveDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method LiveDevices not implemented")
}
func (UnimplementedTrackingServiceServer) LastPoints(context.Context, *LastPointsRequest) (*LastPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPoints not implemented")
}
func (UnimplementedTrackingServiceServer) LastPointsData(context.Context, *LastPointsDataRequest) (*LastPointsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPointsData not implemented")
}
func (UnimplementedTrackingServiceServer) AllPointsData(context.Context, *AllPointsDataRequest) (*AllPointsDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPointsData not implemented")
}
func (UnimplementedTrackingServiceServer) mustEmbedUnimplementedTrackingServiceServer() {}

// UnsafeTrackingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackingServiceServer will
// result in compilation errors.
type UnsafeTrackingServiceServer interface {
	mustEmbedUnimplementedTrackingServiceServer()
}

func RegisterTrackingServiceServer(s grpc.ServiceRegistrar, srv TrackingServiceServer) {
	s.RegisterService(&TrackingService_ServiceDesc, srv)
}

func _TrackingService_LiveDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrackingServiceServer).LiveDevices(&trackingServiceLiveDevicesServer{stream})
}

type TrackingService_LiveDevicesServer interface {
	Send(*LiveDevicesResponse) error
	Recv() (*LiveDevicesRequest, error)
	grpc.ServerStream
}

type trackingServiceLiveDevicesServer struct {
	grpc.ServerStream
}

func (x *trackingServiceLiveDevicesServer) Send(m *LiveDevicesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trackingServiceLiveDevicesServer) Recv() (*LiveDevicesRequest, error) {
	m := new(LiveDevicesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TrackingService_LastPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServiceServer).LastPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.v1.TrackingService/LastPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServiceServer).LastPoints(ctx, req.(*LastPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackingService_LastPointsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastPointsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServiceServer).LastPointsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.v1.TrackingService/LastPointsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServiceServer).LastPointsData(ctx, req.(*LastPointsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackingService_AllPointsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllPointsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackingServiceServer).AllPointsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracking.v1.TrackingService/AllPointsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackingServiceServer).AllPointsData(ctx, req.(*AllPointsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackingService_ServiceDesc is the grpc.ServiceDesc for TrackingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracking.v1.TrackingService",
	HandlerType: (*TrackingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LastPoints",
			Handler:    _TrackingService_LastPoints_Handler,
		},
		{
			MethodName: "LastPointsData",
			Handler:    _TrackingService_LastPointsData_Handler,
		},
		{
			MethodName: "AllPointsData",
			Handler:    _TrackingService_AllPointsData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LiveDevices",
			Handler:       _TrackingService_LiveDevices_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tracking/v1/tracking.proto",
}
