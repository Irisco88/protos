// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: devicemanager/v1/devicemanager.proto

package devicemanagerv1

import (
	_ "github.com/irisco88/protos/gen/common/v1"
	_ "github.com/irisco88/protos/gen/google/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceType int32

const (
	DeviceType_DEVICE_TYPE_OTHER          DeviceType = 0
	DeviceType_DEVICE_TYPE_GPS_TRACKER    DeviceType = 1
	DeviceType_DEVICE_TYPE_CAMERA         DeviceType = 2
	DeviceType_DEVICE_TYPE_SENSOR_BEACON  DeviceType = 3
	DeviceType_DEVICE_TYPE_GATEWAY        DeviceType = 4
	DeviceType_DEVICE_TYPE_OBD_ADAPTER    DeviceType = 5
	DeviceType_DEVICE_TYPE_TELEMATICS_BOX DeviceType = 6
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "DEVICE_TYPE_OTHER",
		1: "DEVICE_TYPE_GPS_TRACKER",
		2: "DEVICE_TYPE_CAMERA",
		3: "DEVICE_TYPE_SENSOR_BEACON",
		4: "DEVICE_TYPE_GATEWAY",
		5: "DEVICE_TYPE_OBD_ADAPTER",
		6: "DEVICE_TYPE_TELEMATICS_BOX",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_TYPE_OTHER":          0,
		"DEVICE_TYPE_GPS_TRACKER":    1,
		"DEVICE_TYPE_CAMERA":         2,
		"DEVICE_TYPE_SENSOR_BEACON":  3,
		"DEVICE_TYPE_GATEWAY":        4,
		"DEVICE_TYPE_OBD_ADAPTER":    5,
		"DEVICE_TYPE_TELEMATICS_BOX": 6,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_devicemanager_v1_devicemanager_proto_enumTypes[0].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_devicemanager_v1_devicemanager_proto_enumTypes[0]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{0}
}

type CellularNetworkType int32

const (
	CellularNetworkType_CELLULAR_NETWORK_UNKNOWN CellularNetworkType = 0
	CellularNetworkType_CELLULAR_NETWORK_2G      CellularNetworkType = 1
	CellularNetworkType_CELLULAR_NETWORK_3G      CellularNetworkType = 2
	CellularNetworkType_CELLULAR_NETWORK_4G      CellularNetworkType = 3
	CellularNetworkType_CELLULAR_NETWORK_5G      CellularNetworkType = 4
	CellularNetworkType_CELLULAR_NETWORK_OTHER   CellularNetworkType = 5
)

// Enum value maps for CellularNetworkType.
var (
	CellularNetworkType_name = map[int32]string{
		0: "CELLULAR_NETWORK_UNKNOWN",
		1: "CELLULAR_NETWORK_2G",
		2: "CELLULAR_NETWORK_3G",
		3: "CELLULAR_NETWORK_4G",
		4: "CELLULAR_NETWORK_5G",
		5: "CELLULAR_NETWORK_OTHER",
	}
	CellularNetworkType_value = map[string]int32{
		"CELLULAR_NETWORK_UNKNOWN": 0,
		"CELLULAR_NETWORK_2G":      1,
		"CELLULAR_NETWORK_3G":      2,
		"CELLULAR_NETWORK_4G":      3,
		"CELLULAR_NETWORK_5G":      4,
		"CELLULAR_NETWORK_OTHER":   5,
	}
)

func (x CellularNetworkType) Enum() *CellularNetworkType {
	p := new(CellularNetworkType)
	*p = x
	return p
}

func (x CellularNetworkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellularNetworkType) Descriptor() protoreflect.EnumDescriptor {
	return file_devicemanager_v1_devicemanager_proto_enumTypes[1].Descriptor()
}

func (CellularNetworkType) Type() protoreflect.EnumType {
	return &file_devicemanager_v1_devicemanager_proto_enumTypes[1]
}

func (x CellularNetworkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellularNetworkType.Descriptor instead.
func (CellularNetworkType) EnumDescriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{1}
}

type DeviceModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchFilter     string     `protobuf:"bytes,1,opt,name=search_filter,json=searchFilter,proto3" json:"search_filter,omitempty"`
	DeviceTypeFilter DeviceType `protobuf:"varint,2,opt,name=device_type_filter,json=deviceTypeFilter,proto3,enum=devicemanager.v1.DeviceType" json:"device_type_filter,omitempty"`
	Ids              []uint32   `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeviceModelsRequest) Reset() {
	*x = DeviceModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModelsRequest) ProtoMessage() {}

func (x *DeviceModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModelsRequest.ProtoReflect.Descriptor instead.
func (*DeviceModelsRequest) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceModelsRequest) GetSearchFilter() string {
	if x != nil {
		return x.SearchFilter
	}
	return ""
}

func (x *DeviceModelsRequest) GetDeviceTypeFilter() DeviceType {
	if x != nil {
		return x.DeviceTypeFilter
	}
	return DeviceType_DEVICE_TYPE_OTHER
}

func (x *DeviceModelsRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeviceModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceTypes []*DeviceModel `protobuf:"bytes,1,rep,name=device_types,json=deviceTypes,proto3" json:"device_types,omitempty"`
}

func (x *DeviceModelsResponse) Reset() {
	*x = DeviceModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModelsResponse) ProtoMessage() {}

func (x *DeviceModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModelsResponse.ProtoReflect.Descriptor instead.
func (*DeviceModelsResponse) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceModelsResponse) GetDeviceTypes() []*DeviceModel {
	if x != nil {
		return x.DeviceTypes
	}
	return nil
}

type DeviceModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Manufacturer      string                 `protobuf:"bytes,3,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Model             string                 `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	DeviceType        DeviceType             `protobuf:"varint,5,opt,name=device_type,json=deviceType,proto3,enum=devicemanager.v1.DeviceType" json:"device_type,omitempty"`
	Description       string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Features          []*DeviceModel_Feature `protobuf:"bytes,7,rep,name=features,proto3" json:"features,omitempty"`
	DocumentationLink string                 `protobuf:"bytes,8,opt,name=documentation_link,json=documentationLink,proto3" json:"documentation_link,omitempty"`
	PhotoLink         string                 `protobuf:"bytes,9,opt,name=photo_link,json=photoLink,proto3" json:"photo_link,omitempty"`
	FirmwareVersion   string                 `protobuf:"bytes,10,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	ModuleName        string                 `protobuf:"bytes,11,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	NetworkType       CellularNetworkType    `protobuf:"varint,12,opt,name=network_type,json=networkType,proto3,enum=devicemanager.v1.CellularNetworkType" json:"network_type,omitempty"`
}

func (x *DeviceModel) Reset() {
	*x = DeviceModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModel) ProtoMessage() {}

func (x *DeviceModel) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModel.ProtoReflect.Descriptor instead.
func (*DeviceModel) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{2}
}

func (x *DeviceModel) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceModel) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceModel) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeviceModel) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_DEVICE_TYPE_OTHER
}

func (x *DeviceModel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeviceModel) GetFeatures() []*DeviceModel_Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *DeviceModel) GetDocumentationLink() string {
	if x != nil {
		return x.DocumentationLink
	}
	return ""
}

func (x *DeviceModel) GetPhotoLink() string {
	if x != nil {
		return x.PhotoLink
	}
	return ""
}

func (x *DeviceModel) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *DeviceModel) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *DeviceModel) GetNetworkType() CellularNetworkType {
	if x != nil {
		return x.NetworkType
	}
	return CellularNetworkType_CELLULAR_NETWORK_UNKNOWN
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Imei            string   `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	SimNumber       string   `protobuf:"bytes,3,opt,name=sim_number,json=simNumber,proto3" json:"sim_number,omitempty"`
	Name            string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ModelId         uint32   `protobuf:"varint,5,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	EnabledFeatures []uint32 `protobuf:"varint,6,rep,packed,name=enabled_features,json=enabledFeatures,proto3" json:"enabled_features,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{3}
}

func (x *Device) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Device) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *Device) GetSimNumber() string {
	if x != nil {
		return x.SimNumber
	}
	return ""
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetModelId() uint32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *Device) GetEnabledFeatures() []uint32 {
	if x != nil {
		return x.EnabledFeatures
	}
	return nil
}

type AddNewDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Imei            string   `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	SimNumber       string   `protobuf:"bytes,2,opt,name=sim_number,json=simNumber,proto3" json:"sim_number,omitempty"`
	Name            string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ModelId         uint32   `protobuf:"varint,4,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	EnabledFeatures []uint32 `protobuf:"varint,5,rep,packed,name=enabled_features,json=enabledFeatures,proto3" json:"enabled_features,omitempty"`
}

func (x *AddNewDeviceRequest) Reset() {
	*x = AddNewDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewDeviceRequest) ProtoMessage() {}

func (x *AddNewDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewDeviceRequest.ProtoReflect.Descriptor instead.
func (*AddNewDeviceRequest) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{4}
}

func (x *AddNewDeviceRequest) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *AddNewDeviceRequest) GetSimNumber() string {
	if x != nil {
		return x.SimNumber
	}
	return ""
}

func (x *AddNewDeviceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddNewDeviceRequest) GetModelId() uint32 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *AddNewDeviceRequest) GetEnabledFeatures() []uint32 {
	if x != nil {
		return x.EnabledFeatures
	}
	return nil
}

type AddNewDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId uint32 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *AddNewDeviceResponse) Reset() {
	*x = AddNewDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNewDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNewDeviceResponse) ProtoMessage() {}

func (x *AddNewDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNewDeviceResponse.ProtoReflect.Descriptor instead.
func (*AddNewDeviceResponse) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{5}
}

func (x *AddNewDeviceResponse) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

type DeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeviceRequest) Reset() {
	*x = DeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRequest) ProtoMessage() {}

func (x *DeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRequest.ProtoReflect.Descriptor instead.
func (*DeviceRequest) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{6}
}

func (x *DeviceRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceDetail *DeviceDetail `protobuf:"bytes,1,opt,name=device_detail,json=deviceDetail,proto3" json:"device_detail,omitempty"`
}

func (x *DeviceResponse) Reset() {
	*x = DeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceResponse) ProtoMessage() {}

func (x *DeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceResponse.ProtoReflect.Descriptor instead.
func (*DeviceResponse) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceResponse) GetDeviceDetail() *DeviceDetail {
	if x != nil {
		return x.DeviceDetail
	}
	return nil
}

type DeviceDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device *Device      `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Model  *DeviceModel `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
}

func (x *DeviceDetail) Reset() {
	*x = DeviceDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceDetail) ProtoMessage() {}

func (x *DeviceDetail) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceDetail.ProtoReflect.Descriptor instead.
func (*DeviceDetail) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceDetail) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *DeviceDetail) GetModel() *DeviceModel {
	if x != nil {
		return x.Model
	}
	return nil
}

type DevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids          []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	SearchFilter string   `protobuf:"bytes,2,opt,name=search_filter,json=searchFilter,proto3" json:"search_filter,omitempty"` //imei or name
	PageNumber   uint32   `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize     uint32   `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *DevicesRequest) Reset() {
	*x = DevicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesRequest) ProtoMessage() {}

func (x *DevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesRequest.ProtoReflect.Descriptor instead.
func (*DevicesRequest) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{9}
}

func (x *DevicesRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DevicesRequest) GetSearchFilter() string {
	if x != nil {
		return x.SearchFilter
	}
	return ""
}

func (x *DevicesRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *DevicesRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type DevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices    []*DeviceDetail `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
	HasNext    bool            `protobuf:"varint,2,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
	TotalPages uint32          `protobuf:"varint,3,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
}

func (x *DevicesResponse) Reset() {
	*x = DevicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevicesResponse) ProtoMessage() {}

func (x *DevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevicesResponse.ProtoReflect.Descriptor instead.
func (*DevicesResponse) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{10}
}

func (x *DevicesResponse) GetDevices() []*DeviceDetail {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *DevicesResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *DevicesResponse) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

type DeleteDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceId     uint32 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	DeletePoints bool   `protobuf:"varint,2,opt,name=delete_points,json=deletePoints,proto3" json:"delete_points,omitempty"`
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDeviceRequest) GetDeviceId() uint32 {
	if x != nil {
		return x.DeviceId
	}
	return 0
}

func (x *DeleteDeviceRequest) GetDeletePoints() bool {
	if x != nil {
		return x.DeletePoints
	}
	return false
}

type DeleteDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDeviceResponse) Reset() {
	*x = DeleteDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceResponse) ProtoMessage() {}

func (x *DeleteDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{12}
}

type DeviceModel_Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *DeviceModel_Feature) Reset() {
	*x = DeviceModel_Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModel_Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModel_Feature) ProtoMessage() {}

func (x *DeviceModel_Feature) ProtoReflect() protoreflect.Message {
	mi := &file_devicemanager_v1_devicemanager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModel_Feature.ProtoReflect.Descriptor instead.
func (*DeviceModel_Feature) Descriptor() ([]byte, []int) {
	return file_devicemanager_v1_devicemanager_proto_rawDescGZIP(), []int{2, 0}
}

func (x *DeviceModel_Feature) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeviceModel_Feature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceModel_Feature) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_devicemanager_v1_devicemanager_proto protoreflect.FileDescriptor

var file_devicemanager_v1_devicemanager_proto_rawDesc = []byte{
	0x0a, 0x24, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x4a, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x58, 0x0a,
	0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xc4, 0x04, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x4f, 0x0a,
	0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5,
	0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x69, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x4e, 0x65,
	0x77, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d,
	0x65, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x22, 0x1f, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x55, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x75, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22,
	0x85, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x22, 0x57, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2a, 0xcd, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x50, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x43,
	0x4b, 0x45, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4e,
	0x53, 0x4f, 0x52, 0x5f, 0x42, 0x45, 0x41, 0x43, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45,
	0x57, 0x41, 0x59, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x42, 0x44, 0x5f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45, 0x52,
	0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x42, 0x4f, 0x58,
	0x10, 0x06, 0x2a, 0xb3, 0x01, 0x0a, 0x13, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x45,
	0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x45, 0x4c, 0x4c,
	0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x32, 0x47, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x33, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x45,
	0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x34,
	0x47, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x35, 0x47, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x45, 0x4c, 0x4c, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x32, 0xe9, 0x05, 0x0a, 0x14, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x96, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x92, 0xd3, 0xe4, 0x93, 0x02, 0x04, 0x0a, 0x02, 0x02, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x0c, 0x41,
	0x64, 0x64, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x4e, 0x65, 0x77, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x64,
	0x6e, 0x65, 0x77, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x92, 0xd3, 0xe4, 0x93, 0x02, 0x04, 0x0a,
	0x02, 0x02, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f,
	0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0xd3, 0xe4, 0x93,
	0x02, 0x04, 0x0a, 0x02, 0x02, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x20, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a,
	0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x92, 0xd3, 0xe4, 0x93, 0x02, 0x04, 0x0a, 0x02, 0x02, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x2a, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x92, 0xd3, 0xe4, 0x93, 0x02, 0x04,
	0x0a, 0x02, 0x02, 0x00, 0x42, 0xcb, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x66, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x3b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02, 0x10, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_devicemanager_v1_devicemanager_proto_rawDescOnce sync.Once
	file_devicemanager_v1_devicemanager_proto_rawDescData = file_devicemanager_v1_devicemanager_proto_rawDesc
)

func file_devicemanager_v1_devicemanager_proto_rawDescGZIP() []byte {
	file_devicemanager_v1_devicemanager_proto_rawDescOnce.Do(func() {
		file_devicemanager_v1_devicemanager_proto_rawDescData = protoimpl.X.CompressGZIP(file_devicemanager_v1_devicemanager_proto_rawDescData)
	})
	return file_devicemanager_v1_devicemanager_proto_rawDescData
}

var file_devicemanager_v1_devicemanager_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_devicemanager_v1_devicemanager_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_devicemanager_v1_devicemanager_proto_goTypes = []interface{}{
	(DeviceType)(0),              // 0: devicemanager.v1.DeviceType
	(CellularNetworkType)(0),     // 1: devicemanager.v1.CellularNetworkType
	(*DeviceModelsRequest)(nil),  // 2: devicemanager.v1.DeviceModelsRequest
	(*DeviceModelsResponse)(nil), // 3: devicemanager.v1.DeviceModelsResponse
	(*DeviceModel)(nil),          // 4: devicemanager.v1.DeviceModel
	(*Device)(nil),               // 5: devicemanager.v1.Device
	(*AddNewDeviceRequest)(nil),  // 6: devicemanager.v1.AddNewDeviceRequest
	(*AddNewDeviceResponse)(nil), // 7: devicemanager.v1.AddNewDeviceResponse
	(*DeviceRequest)(nil),        // 8: devicemanager.v1.DeviceRequest
	(*DeviceResponse)(nil),       // 9: devicemanager.v1.DeviceResponse
	(*DeviceDetail)(nil),         // 10: devicemanager.v1.DeviceDetail
	(*DevicesRequest)(nil),       // 11: devicemanager.v1.DevicesRequest
	(*DevicesResponse)(nil),      // 12: devicemanager.v1.DevicesResponse
	(*DeleteDeviceRequest)(nil),  // 13: devicemanager.v1.DeleteDeviceRequest
	(*DeleteDeviceResponse)(nil), // 14: devicemanager.v1.DeleteDeviceResponse
	(*DeviceModel_Feature)(nil),  // 15: devicemanager.v1.DeviceModel.Feature
}
var file_devicemanager_v1_devicemanager_proto_depIdxs = []int32{
	0,  // 0: devicemanager.v1.DeviceModelsRequest.device_type_filter:type_name -> devicemanager.v1.DeviceType
	4,  // 1: devicemanager.v1.DeviceModelsResponse.device_types:type_name -> devicemanager.v1.DeviceModel
	0,  // 2: devicemanager.v1.DeviceModel.device_type:type_name -> devicemanager.v1.DeviceType
	15, // 3: devicemanager.v1.DeviceModel.features:type_name -> devicemanager.v1.DeviceModel.Feature
	1,  // 4: devicemanager.v1.DeviceModel.network_type:type_name -> devicemanager.v1.CellularNetworkType
	10, // 5: devicemanager.v1.DeviceResponse.device_detail:type_name -> devicemanager.v1.DeviceDetail
	5,  // 6: devicemanager.v1.DeviceDetail.device:type_name -> devicemanager.v1.Device
	4,  // 7: devicemanager.v1.DeviceDetail.model:type_name -> devicemanager.v1.DeviceModel
	10, // 8: devicemanager.v1.DevicesResponse.devices:type_name -> devicemanager.v1.DeviceDetail
	2,  // 9: devicemanager.v1.DeviceManagerService.DeviceModels:input_type -> devicemanager.v1.DeviceModelsRequest
	6,  // 10: devicemanager.v1.DeviceManagerService.AddNewDevice:input_type -> devicemanager.v1.AddNewDeviceRequest
	8,  // 11: devicemanager.v1.DeviceManagerService.Device:input_type -> devicemanager.v1.DeviceRequest
	11, // 12: devicemanager.v1.DeviceManagerService.Devices:input_type -> devicemanager.v1.DevicesRequest
	13, // 13: devicemanager.v1.DeviceManagerService.DeleteDevice:input_type -> devicemanager.v1.DeleteDeviceRequest
	3,  // 14: devicemanager.v1.DeviceManagerService.DeviceModels:output_type -> devicemanager.v1.DeviceModelsResponse
	7,  // 15: devicemanager.v1.DeviceManagerService.AddNewDevice:output_type -> devicemanager.v1.AddNewDeviceResponse
	9,  // 16: devicemanager.v1.DeviceManagerService.Device:output_type -> devicemanager.v1.DeviceResponse
	12, // 17: devicemanager.v1.DeviceManagerService.Devices:output_type -> devicemanager.v1.DevicesResponse
	14, // 18: devicemanager.v1.DeviceManagerService.DeleteDevice:output_type -> devicemanager.v1.DeleteDeviceResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_devicemanager_v1_devicemanager_proto_init() }
func file_devicemanager_v1_devicemanager_proto_init() {
	if File_devicemanager_v1_devicemanager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_devicemanager_v1_devicemanager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devicemanager_v1_devicemanager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devicemanager_v1_devicemanager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devicemanager_v1_devicemanager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devicemanager_v1_devicemanager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devicemanager_v1_devicemanager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNewDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devicemanager_v1_devicemanager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devicemanager_v1_devicemanager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devicemanager_v1_devicemanager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devicemanager_v1_devicemanager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devicemanager_v1_devicemanager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devicemanager_v1_devicemanager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devicemanager_v1_devicemanager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_devicemanager_v1_devicemanager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModel_Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_devicemanager_v1_devicemanager_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_devicemanager_v1_devicemanager_proto_goTypes,
		DependencyIndexes: file_devicemanager_v1_devicemanager_proto_depIdxs,
		EnumInfos:         file_devicemanager_v1_devicemanager_proto_enumTypes,
		MessageInfos:      file_devicemanager_v1_devicemanager_proto_msgTypes,
	}.Build()
	File_devicemanager_v1_devicemanager_proto = out.File
	file_devicemanager_v1_devicemanager_proto_rawDesc = nil
	file_devicemanager_v1_devicemanager_proto_goTypes = nil
	file_devicemanager_v1_devicemanager_proto_depIdxs = nil
}
