// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: devicemanager/v1/devicemanager.proto

package devicemanagerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceManagerServiceClient is the client API for DeviceManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceManagerServiceClient interface {
	DeviceModels(ctx context.Context, in *DeviceModelsRequest, opts ...grpc.CallOption) (*DeviceModelsResponse, error)
	AddNewDevice(ctx context.Context, in *AddNewDeviceRequest, opts ...grpc.CallOption) (*AddNewDeviceResponse, error)
	Device(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
	Devices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
}

type deviceManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceManagerServiceClient(cc grpc.ClientConnInterface) DeviceManagerServiceClient {
	return &deviceManagerServiceClient{cc}
}

func (c *deviceManagerServiceClient) DeviceModels(ctx context.Context, in *DeviceModelsRequest, opts ...grpc.CallOption) (*DeviceModelsResponse, error) {
	out := new(DeviceModelsResponse)
	err := c.cc.Invoke(ctx, "/devicemanager.v1.DeviceManagerService/DeviceModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerServiceClient) AddNewDevice(ctx context.Context, in *AddNewDeviceRequest, opts ...grpc.CallOption) (*AddNewDeviceResponse, error) {
	out := new(AddNewDeviceResponse)
	err := c.cc.Invoke(ctx, "/devicemanager.v1.DeviceManagerService/AddNewDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerServiceClient) Device(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, "/devicemanager.v1.DeviceManagerService/Device", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerServiceClient) Devices(ctx context.Context, in *DevicesRequest, opts ...grpc.CallOption) (*DevicesResponse, error) {
	out := new(DevicesResponse)
	err := c.cc.Invoke(ctx, "/devicemanager.v1.DeviceManagerService/Devices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	out := new(DeleteDeviceResponse)
	err := c.cc.Invoke(ctx, "/devicemanager.v1.DeviceManagerService/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceManagerServiceServer is the server API for DeviceManagerService service.
// All implementations must embed UnimplementedDeviceManagerServiceServer
// for forward compatibility
type DeviceManagerServiceServer interface {
	DeviceModels(context.Context, *DeviceModelsRequest) (*DeviceModelsResponse, error)
	AddNewDevice(context.Context, *AddNewDeviceRequest) (*AddNewDeviceResponse, error)
	Device(context.Context, *DeviceRequest) (*DeviceResponse, error)
	Devices(context.Context, *DevicesRequest) (*DevicesResponse, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	mustEmbedUnimplementedDeviceManagerServiceServer()
}

// UnimplementedDeviceManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceManagerServiceServer struct {
}

func (UnimplementedDeviceManagerServiceServer) DeviceModels(context.Context, *DeviceModelsRequest) (*DeviceModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceModels not implemented")
}
func (UnimplementedDeviceManagerServiceServer) AddNewDevice(context.Context, *AddNewDeviceRequest) (*AddNewDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewDevice not implemented")
}
func (UnimplementedDeviceManagerServiceServer) Device(context.Context, *DeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Device not implemented")
}
func (UnimplementedDeviceManagerServiceServer) Devices(context.Context, *DevicesRequest) (*DevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Devices not implemented")
}
func (UnimplementedDeviceManagerServiceServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDeviceManagerServiceServer) mustEmbedUnimplementedDeviceManagerServiceServer() {}

// UnsafeDeviceManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceManagerServiceServer will
// result in compilation errors.
type UnsafeDeviceManagerServiceServer interface {
	mustEmbedUnimplementedDeviceManagerServiceServer()
}

func RegisterDeviceManagerServiceServer(s grpc.ServiceRegistrar, srv DeviceManagerServiceServer) {
	s.RegisterService(&DeviceManagerService_ServiceDesc, srv)
}

func _DeviceManagerService_DeviceModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServiceServer).DeviceModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanager.v1.DeviceManagerService/DeviceModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServiceServer).DeviceModels(ctx, req.(*DeviceModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagerService_AddNewDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServiceServer).AddNewDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanager.v1.DeviceManagerService/AddNewDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServiceServer).AddNewDevice(ctx, req.(*AddNewDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagerService_Device_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServiceServer).Device(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanager.v1.DeviceManagerService/Device",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServiceServer).Device(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagerService_Devices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServiceServer).Devices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanager.v1.DeviceManagerService/Devices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServiceServer).Devices(ctx, req.(*DevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagerService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanager.v1.DeviceManagerService/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceManagerService_ServiceDesc is the grpc.ServiceDesc for DeviceManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "devicemanager.v1.DeviceManagerService",
	HandlerType: (*DeviceManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceModels",
			Handler:    _DeviceManagerService_DeviceModels_Handler,
		},
		{
			MethodName: "AddNewDevice",
			Handler:    _DeviceManagerService_AddNewDevice_Handler,
		},
		{
			MethodName: "Device",
			Handler:    _DeviceManagerService_Device_Handler,
		},
		{
			MethodName: "Devices",
			Handler:    _DeviceManagerService_Devices_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceManagerService_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "devicemanager/v1/devicemanager.proto",
}
