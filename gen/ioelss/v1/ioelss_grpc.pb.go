// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ioelss/v1/ioelss.proto

package ioelssv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IoelssServiceClient is the client API for IoelssService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IoelssServiceClient interface {
	CreateIoelss(ctx context.Context, in *CreateIoelssRequest, opts ...grpc.CallOption) (*CreateIoelssResponse, error)
	UpdateIoelss(ctx context.Context, in *UpdateIoelssRequest, opts ...grpc.CallOption) (*UpdateIoelssResponse, error)
	DeleteIoelss(ctx context.Context, in *DeleteIoelssRequest, opts ...grpc.CallOption) (*DeleteIoelssResponse, error)
	ListIoelsss(ctx context.Context, in *ListIoelsssRequest, opts ...grpc.CallOption) (*ListIoelsssResponse, error)
}

type ioelssServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIoelssServiceClient(cc grpc.ClientConnInterface) IoelssServiceClient {
	return &ioelssServiceClient{cc}
}

func (c *ioelssServiceClient) CreateIoelss(ctx context.Context, in *CreateIoelssRequest, opts ...grpc.CallOption) (*CreateIoelssResponse, error) {
	out := new(CreateIoelssResponse)
	err := c.cc.Invoke(ctx, "/ioelss.v1.IoelssService/CreateIoelss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioelssServiceClient) UpdateIoelss(ctx context.Context, in *UpdateIoelssRequest, opts ...grpc.CallOption) (*UpdateIoelssResponse, error) {
	out := new(UpdateIoelssResponse)
	err := c.cc.Invoke(ctx, "/ioelss.v1.IoelssService/UpdateIoelss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioelssServiceClient) DeleteIoelss(ctx context.Context, in *DeleteIoelssRequest, opts ...grpc.CallOption) (*DeleteIoelssResponse, error) {
	out := new(DeleteIoelssResponse)
	err := c.cc.Invoke(ctx, "/ioelss.v1.IoelssService/DeleteIoelss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ioelssServiceClient) ListIoelsss(ctx context.Context, in *ListIoelsssRequest, opts ...grpc.CallOption) (*ListIoelsssResponse, error) {
	out := new(ListIoelsssResponse)
	err := c.cc.Invoke(ctx, "/ioelss.v1.IoelssService/ListIoelsss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IoelssServiceServer is the server API for IoelssService service.
// All implementations must embed UnimplementedIoelssServiceServer
// for forward compatibility
type IoelssServiceServer interface {
	CreateIoelss(context.Context, *CreateIoelssRequest) (*CreateIoelssResponse, error)
	UpdateIoelss(context.Context, *UpdateIoelssRequest) (*UpdateIoelssResponse, error)
	DeleteIoelss(context.Context, *DeleteIoelssRequest) (*DeleteIoelssResponse, error)
	ListIoelsss(context.Context, *ListIoelsssRequest) (*ListIoelsssResponse, error)
	mustEmbedUnimplementedIoelssServiceServer()
}

// UnimplementedIoelssServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIoelssServiceServer struct {
}

func (UnimplementedIoelssServiceServer) CreateIoelss(context.Context, *CreateIoelssRequest) (*CreateIoelssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIoelss not implemented")
}
func (UnimplementedIoelssServiceServer) UpdateIoelss(context.Context, *UpdateIoelssRequest) (*UpdateIoelssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIoelss not implemented")
}
func (UnimplementedIoelssServiceServer) DeleteIoelss(context.Context, *DeleteIoelssRequest) (*DeleteIoelssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIoelss not implemented")
}
func (UnimplementedIoelssServiceServer) ListIoelsss(context.Context, *ListIoelsssRequest) (*ListIoelsssResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIoelsss not implemented")
}
func (UnimplementedIoelssServiceServer) mustEmbedUnimplementedIoelssServiceServer() {}

// UnsafeIoelssServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IoelssServiceServer will
// result in compilation errors.
type UnsafeIoelssServiceServer interface {
	mustEmbedUnimplementedIoelssServiceServer()
}

func RegisterIoelssServiceServer(s grpc.ServiceRegistrar, srv IoelssServiceServer) {
	s.RegisterService(&IoelssService_ServiceDesc, srv)
}

func _IoelssService_CreateIoelss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIoelssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoelssServiceServer).CreateIoelss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ioelss.v1.IoelssService/CreateIoelss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoelssServiceServer).CreateIoelss(ctx, req.(*CreateIoelssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IoelssService_UpdateIoelss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIoelssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoelssServiceServer).UpdateIoelss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ioelss.v1.IoelssService/UpdateIoelss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoelssServiceServer).UpdateIoelss(ctx, req.(*UpdateIoelssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IoelssService_DeleteIoelss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIoelssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoelssServiceServer).DeleteIoelss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ioelss.v1.IoelssService/DeleteIoelss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoelssServiceServer).DeleteIoelss(ctx, req.(*DeleteIoelssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IoelssService_ListIoelsss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIoelsssRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IoelssServiceServer).ListIoelsss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ioelss.v1.IoelssService/ListIoelsss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IoelssServiceServer).ListIoelsss(ctx, req.(*ListIoelsssRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IoelssService_ServiceDesc is the grpc.ServiceDesc for IoelssService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IoelssService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ioelss.v1.IoelssService",
	HandlerType: (*IoelssServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIoelss",
			Handler:    _IoelssService_CreateIoelss_Handler,
		},
		{
			MethodName: "UpdateIoelss",
			Handler:    _IoelssService_UpdateIoelss_Handler,
		},
		{
			MethodName: "DeleteIoelss",
			Handler:    _IoelssService_DeleteIoelss_Handler,
		},
		{
			MethodName: "ListIoelsss",
			Handler:    _IoelssService_ListIoelsss_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ioelss/v1/ioelss.proto",
}
